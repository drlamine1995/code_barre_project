Curseur : 
Le curseur (ou "cursor" en anglais) est un objet essentiel lorsqu'on interagit avec une base de données à l'aide de Python (ou d'autres langages de programmation). Il permet d'exécuter des requêtes SQL, de parcourir les résultats de ces requêtes et de gérer la transaction avec la base de données. Voici un aperçu de son rôle et de son fonctionnement :

**Rôle du Curseur :**

1. **Exécution des Requêtes SQL :** Le curseur est utilisé pour envoyer des requêtes SQL au serveur de base de données. Vous créez une requête SQL en utilisant le curseur, puis vous l'exécutez pour interagir avec la base de données (sélection, insertion, mise à jour, suppression, etc.).

2. **Récupération des Résultats :** Après avoir exécuté une requête SQL, le curseur permet de récupérer les résultats de cette requête. Vous pouvez parcourir les lignes de résultats une par une ou les récupérer en bloc, en fonction de vos besoins.

3. **Gestion de la Transaction :** Le curseur est également utilisé pour gérer les transactions avec la base de données. Vous pouvez commencer une transaction, la valider (commit) si tout s'est bien passé, ou l'annuler (rollback) en cas d'erreur.

**Fonctionnement du Curseur :**

1. **Création du Curseur :** Pour utiliser un curseur, vous devez d'abord le créer en utilisant la méthode `.cursor()` sur un objet de connexion à la base de données. Par exemple :

   ```python
   cursor = connexion.cursor()
   ```

   Une fois créé, le curseur est prêt à exécuter des requêtes.

2. **Exécution de Requêtes :** Vous pouvez exécuter des requêtes SQL à l'aide de la méthode `.execute()` du curseur. Par exemple :

   ```python
   cursor.execute("SELECT nom, age FROM utilisateurs WHERE ville='Paris'")
   ```

   Cette méthode prend en charge tout type de requête SQL, qu'il s'agisse de sélections, d'insertions, de mises à jour, ou de suppressions.

3. **Récupération des Résultats :** Après avoir exécuté une requête de sélection, vous pouvez utiliser des méthodes comme `.fetchone()`, `.fetchall()` ou `.fetchmany(n)` pour récupérer les résultats. Par exemple :

   ```python
   # Récupérer la première ligne de résultat
   premiere_ligne = cursor.fetchone()

   # Récupérer toutes les lignes de résultat
   toutes_les_lignes = cursor.fetchall()
   ```

   Vous pouvez également itérer sur les résultats ligne par ligne.

4. **Gestion de la Transaction :** Pour gérer la transaction, utilisez les méthodes `.commit()` pour valider les modifications dans la base de données et `.rollback()` pour annuler la transaction en cas d'erreur. Par exemple :

   ```python
   try:
       # Effectuer des opérations sur la base de données
       ...

       # Valider la transaction
       connexion.commit()
   except Exception as e:
       # En cas d'erreur, annuler la transaction
       connexion.rollback()
       print("Erreur:", str(e))
   ```

5. **Fermeture du Curseur :** Une fois que vous avez terminé d'utiliser le curseur, il est important de le fermer pour libérer les ressources. Vous pouvez le faire avec la méthode `.close()` :

   ```python
   cursor.close()
   ```

Le curseur est un élément clé pour interagir efficacement avec une base de données à partir de Python, car il vous permet d'exécuter des requêtes, de récupérer des données et de gérer les transactions de manière contrôlée. Assurez-vous de toujours fermer le curseur et la connexion une fois que vous avez terminé pour éviter les fuites de ressources.